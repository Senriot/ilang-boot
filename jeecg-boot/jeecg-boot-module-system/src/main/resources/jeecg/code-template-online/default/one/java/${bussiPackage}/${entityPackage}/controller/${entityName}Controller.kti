package ${bussiPackage}.${entityPackage}.controller;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.jeecg.common.api.vo.Result;
import org.jeecg.common.system.query.QueryGenerator;
import org.jeecg.common.util.oConvertUtils;
import ${bussiPackage}.${entityPackage}.entity.${entityName};
import ${bussiPackage}.${entityPackage}.service.${entityName}Service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import lombok.extern.slf4j.Slf4j;

import org.jeecgframework.poi.excel.ExcelImportUtil;
import org.jeecgframework.poi.excel.def.NormalExcelConstants;
import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.ImportParams;
import org.jeecgframework.poi.excel.view.JeecgEntityExcelView;
import org.jeecg.common.system.base.controller.JeecgController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import com.alibaba.fastjson.JSON;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.jeecg.common.aspect.annotation.AutoLog;

 /**
 * @Description: ${tableVo.ftlDescription}
 * @Author: Allen
 * @Date:   ${.now?string["yyyy-MM-dd"]}
 * @Version: V1.0
 */
@Api(tags=["${tableVo.ftlDescription}"])
@RestController
@RequestMapping("/${entityPackage}/${entityName?uncap_first}")
class ${entityName}Controller(private val ${entityName?uncap_first}Service: ${entityName}Service) : JeecgController<${entityName}, ${entityName}Service>() {

	/**
	* 分页列表查询
	*
	* @param ${entityName?uncap_first}
	* @param pageNo
	* @param pageSize
	* @param req
	* @return
	*/
	@AutoLog(value = "${tableVo.ftlDescription}-分页列表查询")
	@ApiOperation(value="${tableVo.ftlDescription}-分页列表查询", notes="${tableVo.ftlDescription}-分页列表查询")
	@GetMapping(value = ["/list"])
	fun queryPageList( ${entityName?uncap_first}: ${entityName}?,
						@RequestParam(name="pageNo", defaultValue="1")
						pageNo: Long = 1,
						@RequestParam(name="pageSize", defaultValue="10")
						pageSize: Long = 10,
 						req: HttpServletRequest): Result<*>
	{
		val queryWrapper: QueryWrapper<${entityName}> = QueryGenerator.initQueryWrapper(${entityName?uncap_first}, req.parameterMap)
		val page = Page<${entityName}>(pageNo, pageSize)
		val pageList = ${entityName?uncap_first}Service.page(page, queryWrapper)
		return Result.OK(pageList)
	}

	/**
	*   添加
	*
	* @param ${entityName?uncap_first}
	* @return
	*/
	@AutoLog(value = "${tableVo.ftlDescription}-添加")
	@ApiOperation(value="${tableVo.ftlDescription}-添加", notes="${tableVo.ftlDescription}-添加")
	@PostMapping(value = ["/add"])
	fun add(@RequestBody ${entityName?uncap_first}: ${entityName}): Result<*>
	{
		${entityName?uncap_first}Service.save(${entityName?uncap_first})
		return Result.OK("添加成功！")
	}

	/**
	*  编辑
	*
	* @param ${entityName?uncap_first}
	* @return
	*/
	@AutoLog(value = "${tableVo.ftlDescription}-编辑")
	@ApiOperation(value="${tableVo.ftlDescription}-编辑", notes="${tableVo.ftlDescription}-编辑")
	@PutMapping("/edit")
	fun edit(@RequestBody ${entityName?uncap_first}:${entityName} ):Result<*>
	{
		${entityName?uncap_first}Service.updateById(${entityName?uncap_first})
		return Result.OK("编辑成功!")
	}

	/**
	*   通过id删除
	*
	* @param id
	* @return
	*/
	@AutoLog(value = "${tableVo.ftlDescription}-通过id删除")
	@ApiOperation(value="${tableVo.ftlDescription}-通过id删除", notes="${tableVo.ftlDescription}-通过id删除")
	@DeleteMapping("/delete")
	fun delete(@RequestParam(name="id",required=true) id: String ):Result<*>
	{
		${entityName?uncap_first}Service.removeById(id)
		return Result.OK("删除成功!")
	}

	/**
	*  批量删除
	*
	* @param ids
	* @return
	*/
	@AutoLog(value = "${tableVo.ftlDescription}-批量删除")
	@ApiOperation(value="${tableVo.ftlDescription}-批量删除", notes="${tableVo.ftlDescription}-批量删除")
	@DeleteMapping("/deleteBatch")
	fun deleteBatch(@RequestParam(name="ids",required=true) ids: String ):Result<*>
	{
		this.${entityName?uncap_first}Service.removeByIds(ids.split(","))
		return Result.OK("批量删除成功!")
	}

	/**
	* 通过id查询
	*
	* @param id
	* @return
	*/
	@AutoLog(value = "${tableVo.ftlDescription}-通过id查询")
	@ApiOperation(value="${tableVo.ftlDescription}-通过id查询", notes="${tableVo.ftlDescription}-通过id查询")
	@GetMapping("/queryById")
	fun queryById(@RequestParam(name="id",required=true) id: String ):Result<*>
	{
		val ${entityName?uncap_first} = ${entityName?uncap_first}Service.getById(id) ?: return Result.error("未找到对应数据")
		return Result.OK(${entityName?uncap_first})
	}

	/**
	* 导出excel
	*
	* @param request
	* @param ${entityName?uncap_first}
	*/
	@RequestMapping("/exportXls")
	fun exportXls(request: HttpServletRequest ,${entityName?uncap_first}: ${entityName} ):ModelAndView?
	{
		return super.exportXls(request, ${entityName?uncap_first}, ${entityName}::class.java, "${tableVo.ftlDescription}")
	}


	/**
	* 通过excel导入数据
	*
	* @param request
	* @param response
	* @return
	*/
	@RequestMapping("/importExcel", method = [RequestMethod.POST])
	fun importExcel(request:HttpServletRequest , response:HttpServletResponse ):Result<*>
	{
		return super.importExcel(request, response, ${entityName}::class.java)
	}
}
