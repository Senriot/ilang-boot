package ${bussiPackage}.${entityPackage}.entity;

import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.math.BigDecimal;
import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableName;
import lombok.Data;
import com.fasterxml.jackson.annotation.JsonFormat;
import org.springframework.format.annotation.DateTimeFormat;
import org.jeecgframework.poi.excel.annotation.Excel;
import org.jeecg.common.aspect.annotation.Dict;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.EqualsAndHashCode;
import lombok.experimental.Accessors;

/**
* @Description: ${tableVo.ftlDescription}
* @Author: Allen
* @Date:   ${.now?string["yyyy-MM-dd"]}
* @Version: V1.0
*/
@TableName("${tableName}")
@ApiModel(value="${tableName}对象", description="${tableVo.ftlDescription}")
data class ${entityName} (

<#list originalColumns as po>
    /**
    * ${po.filedComment}
    */
    <#if po.fieldName == primaryKeyField>
        @TableId(type = IdType.ASSIGN_ID)
    <#else>
        <#if po.fieldDbType =='Date'>
            <#if po.classType=='date'>
                @Excel(name = "${po.filedComment}", width = 15.0, format = "yyyy-MM-dd")
                @JsonFormat(timezone = "GMT+8",pattern = "yyyy-MM-dd")
                @DateTimeFormat(pattern="yyyy-MM-dd")
                @ApiModelProperty(value = "${po.filedComment}")
            <#else>
                @Excel(name = "${po.filedComment}", width = 20.0, format = "yyyy-MM-dd HH:mm:ss")
                @JsonFormat(timezone = "GMT+8",pattern = "yyyy-MM-dd HH:mm:ss")
                @DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss")
                @ApiModelProperty(value = "${po.filedComment}")
            </#if>
        <#else>
            @Excel(name = "${po.filedComment}", width = 15.0)
            @ApiModelProperty(value = "${po.filedComment}")
        </#if>
        <#if po.classType!='popup'>
            <#if po.dictTable?default("")?trim?length gt 1>
                @Dict(dicCode="${po.dictField}",dicText="${po.dictText}",dictTable="${po.dictTable}")
            <#elseif po.dictField?default("")?trim?length gt 1>
                @Dict(dicCode="${po.dictField}")
            </#if>
        </#if>
    </#if>
    <#if po.fieldDbType=='Blob'>
        private transient java.lang.String ${po.fieldName}String;

        private byte[] ${po.fieldName};

        public byte[] get${po.fieldName?cap_first}(){
        if(${po.fieldName}String==null){
        return null;
        }
        try {
        return ${po.fieldName}String.getBytes("UTF-8");
        } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
        }
        return null;
        }

        public String get${po.fieldName?cap_first}String(){
        if(${po.fieldName}==null || ${po.fieldName}.length==0){
        return "";
        }
        try {
        return new String(${po.fieldName},"UTF-8");
        } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
        }
        return "";
        }
    <#else>
        var ${po.fieldName}: ${po.fieldType}? = null,
    </#if>
</#list>
)
{
companion object
{
<#list originalColumns as po>
    const val COL_${po.fieldDbName?upper_case} = "${po.fieldDbName?lower_case}"
</#list>
}
}
